{"version":3,"sources":["helper/HelperApi.js","context/DepartmentsContext.js","pages/employee/EmployeeDetails.js","pages/employee/AddUpdateEmployee.js","pages/department/DepartmentDetails.js","pages/department/DepartmentForm.js","pages/team/TeamDetails.js","pages/team/TeamForm.js","App.js","reportWebVitals.js","index.js"],"names":["getCollection","objectType","collection","localStorage","getItem","toLowerCase","JSON","parse","saveCollection","e","console","log","collectionArr","setItem","stringify","isDepartmentExist","departmentName","some","department","name","isEmployeeExist","email","filter","emp","length","getObjectById","objectId","find","id","filterEmployees","teamId","departmentId","map","key","text","value","DepartmentsContext","createContext","DepartmentsProvider","children","useState","departments","setDepartments","employees","setEmployees","useEffect","Provider","EmployeeDetails","Grid","Column","floated","width","Header","as","to","className","Icon","Table","color","Row","HeaderCell","Body","phoneNumber","position","Cell","AddUpdateEmployee","history","useHistory","useContext","employee","setEmployee","updateAction","setUpdateAction","useParams","existingInfo","handleChange","target","Container","Form","Field","control","Input","label","defaultValue","placeholder","onChange","onClick","result","employeeObject","forEach","updateEmployeeInfo","error","push","saveEmployee","DepartmentDetails","title","head","teams","DepartmentForm","departmentInfo","setDepartmentInfo","empOptions","setEmpOtions","setError","depInfo","Select","options","search","selection","Message","info","header","content","departmentHead","departmentObject","saveDepartment","TeamDetails","teamLeader","teamMembers","List","items","mem","TeamForm","teamInfo","setTeamInfo","employeesOptions","setEmployeesOptions","leaderOptions","setLeaderOptions","getExistingTeam","team","filterEmployeesOptions","Item","Dropdown","multiple","teamObject","de","te","includes","updatedEmployees","updatedDepartments","updateTeam","obj","saveTeam","ListExampleTree","Content","App","style","padding","Divider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.296a85c3.chunk.js","sourcesContent":["/**\n * It fetches the collection from local storage.\n * @param {String} objectType\n * @returns {Array}\n */\n const getCollection = (objectType) => {\n    if (!objectType) return;\n    let collection = localStorage.getItem(objectType.toLowerCase());\n    try {\n        if (collection) {\n            collection = JSON.parse(collection);\n        } else {\n            collection = [];\n            saveCollection(objectType, collection);\n        }\n    } catch (e) {\n        console.log(e);\n    } finally {\n        return collection;\n    }\n};\n\n/**\n * Sets the item in the local storage.\n * @param {String} objectType\n * @param {Array} collectionArr\n * @returns\n */\nconst saveCollection = (objectType, collectionArr) => {\n    if (!objectType) return;\n    localStorage.setItem(\n        objectType.toLowerCase(),\n        JSON.stringify(collectionArr)\n    );\n};\n\n/**\n * It saves the new department\n * @param {String} departmentName\n * @returns\n */\nconst saveDepartment = ({departmentName, departmentHead}) => {\n    if (!isDepartmentExist(departmentName)) {\n        const departmentObject = {\n            name: departmentName.toLowerCase(),\n            head: departmentHead,\n            teams: [],\n        };\n        const departments = getCollection(\"departments\");\n        const employees = getCollection(\"employees\");\n        if (departments.length) {\n            departmentObject.id = departments[departments.length - 1].id + 1;\n        } else {\n            departmentObject.id = 1;\n        }\n        departments.push(departmentObject);\n\n        const head = employees.find(emp => {\n            return emp.id === departmentHead\n        });\n\n        head.departmentId = departmentObject.id;\n        head.position = 'head';\n\n        saveCollection(\"employees\", employees);\n        saveCollection(\"departments\", departments);\n        return {\n            employees,\n            departments\n        };\n    } else {\n        return { error: \"Department already exist.\" };\n    }\n};\n\n/**\n * Checks whether department already exist or not.\n * @param {String} departmentName\n * @returns\n */\nconst isDepartmentExist = (departmentName) => {\n    return getCollection(\"departments\").some((department) => {\n        return department.name === departmentName.toLowerCase();\n    });\n};\n\n/**\n * Checks whether ant object is present or not based on name property.\n * @param {String} name\n * @param {Array} collection\n * @returns {Boolean}\n */\nconst isObjectExist = (name, collection) => {\n    return collection.some((obj) => {\n        return obj.name === name.toLowerCase();\n    });\n};\n\n/**\n * Checks whether employee already exist in the collection or not.\n * @param {EmployeeObject} employee object\n * @returns {Boolean}\n */\nconst isEmployeeExist = ({ email }) => {\n    return getCollection(\"employees\").filter((emp) => {\n        return email && email.toLowerCase() === emp.email.toLowerCase();\n    }).length;\n};\n\n/**\n * Saves the new object in collection.\n * @param {String} objectType Collection type\n * @param {EmployeeObject} employeeObject to be saved\n */\nconst saveEmployee = (objectType = \"employees\", employeeObject) => {\n    if (!isEmployeeExist(employeeObject)) {\n        let collection = getCollection(objectType);\n        if (collection.length) {\n            employeeObject.id = collection[collection.length - 1].id + 1;\n        } else {\n            employeeObject.id = 1;\n        }\n        collection.push(employeeObject);\n        saveCollection(\"employees\", collection);\n        return { collection };\n    } else {\n        return { error: \"Employee already exist.\" };\n    }\n};\n\n/**\n * Updates the employee information in collection.\n * @param {EmployeeObject} employeeObject\n */\nconst updateEmployeeInfo = (employeeObject) => {\n    const collection = getCollection(\"employees\");\n    if (collection.length) {\n        collection.forEach((emp) => {\n            if (employeeObject.id === emp.id) {\n                emp.name = employeeObject.name;\n                emp.email = employeeObject.email;\n                emp.phoneNumber = employeeObject.phoneNumber;\n            }\n        });\n        saveCollection(\"employees\", collection);\n        return { collection };\n    }\n};\n\n/**\n * Finds the employee object from ID.\n * @param {Number} employeeId\n * @returns EmployeeObject\n */\nconst getEmployeeById = (employeeId, collection) => {\n    return collection.find(({ id }) => {\n        return id === employeeId;\n    });\n};\n\n/**\n * Finds the object object from ID.\n * @param {Number} employeeId\n * @returns EmployeeObject\n */\nconst getObjectById = (collection, objectId) => {\n    return collection.find(({ id }) => {\n        return id === +objectId;\n    });\n};\n\nconst getExistingTeam = (departmentId, teamId, collection) => {\n    const department = getObjectById(collection, +departmentId);\n    if (department) {\n        const team = getObjectById(department.teams, +teamId);\n\n        return team ? team : {};\n    }\n\n    return {};\n};\n\n/**\n * Store team data.\n * @param {Object} teamObject\n * @returns {Object}\n */\nconst saveTeam = (teamObject) => {\n    const departments = getCollection(\"departments\");\n\n    const department = departments.find((de) => {\n        return de.id === teamObject.departmentId;\n    });\n    const employees = getCollection(\"employees\");\n    if (!isObjectExist(teamObject.name, department.teams)) {\n        const teams = department.teams;\n        if (teams.length) {\n            teamObject.id = teams[teams.length - 1].id + 1;\n        } else {\n            teamObject.id = 1;\n        }\n        department.teams.push(teamObject);\n\n        const selectedMembers = employees.filter(({ id }) => {\n            return (\n                teamObject.teamMembers.includes(id) ||\n                id === teamObject.teamLeader\n            );\n        });\n\n        selectedMembers.forEach((emp) => {\n            if (teamObject.teamLeader === emp.id) {\n                emp.position = \"team leader\";\n            } else {\n                emp.position = \"team member\";\n            }\n            emp.departmentId = teamObject.departmentId;\n            emp.teamId = teamObject.id;\n        });\n    }\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    };\n};\n\nconst updateTeam = (teamObject) => {\n    const departments = getCollection(\"departments\");\n    const employees = getCollection(\"employees\");\n\n    const department = departments.find((de) => {\n        return de.id === teamObject.departmentId;\n\t});\n\n    // fetch old team info in order to update the info\n    // like teamLeader and teamMembers\n    const team = department.teams.find((te) => {\n        return te.id === teamObject.id;\n    });\n\n    // updating position for old memebers and leader\n    const teamLeader = employees.find((emp) => emp.id === team.teamLeader);\n    teamLeader.position = null;\n    teamLeader.teamId = null;\n    teamLeader.departmentId = null;\n    const oldMembers = employees.filter((emp) =>\n        team.teamMembers.includes(emp.id)\n    );\n    oldMembers.forEach((mem) => {\n        teamLeader.position = null;\n        teamLeader.teamId = null;\n        teamLeader.departmentId = null;\n    });\n\n    // updating information for updated members\n    const selectedMembers = employees.filter(({ id }) => {\n        return (\n            teamObject.teamMembers.includes(id) || id === teamObject.teamLeader\n        );\n    });\n\n    selectedMembers.forEach((emp) => {\n        if (teamObject.teamLeader === emp.id) {\n            emp.position = \"team leader\";\n        } else {\n            emp.position = \"team member\";\n        }\n        emp.departmentId = teamObject.departmentId;\n        emp.teamId = teamObject.id;\n    });\n\n    team.name = teamObject.name;\n    team.teamLeader = teamObject.teamLeader;\n    team.teamMembers = teamObject.teamMembers;\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n\t}\n};\n\n\n/**\n   * Basically I'm creating object for dropdown options\n   * @param {*} collection\n   * @returns\n   */\n const filterEmployees = (collection, teamId, departmentId) => {\n    return collection.filter(emp => {\n        return (!emp.departmentId && !emp.teamId)\n            || (emp.teamId === teamId && emp.departmentId === departmentId)\n            || !emp.departmentId\n    }).map(({ id, name }) => {\n      return {\n        key: id,\n        text: name,\n        value: id,\n      };\n    });\n  };\n\nexport {\n    getCollection,\n    saveCollection,\n    isEmployeeExist,\n    saveEmployee,\n    getEmployeeById,\n    getObjectById,\n    updateEmployeeInfo,\n    saveDepartment,\n    isDepartmentExist,\n    saveTeam,\n    isObjectExist,\n    getExistingTeam,\n\tupdateTeam,\n\tfilterEmployees\n};","import { createContext, useEffect, useState } from \"react\";\nimport { getCollection } from \"../helper/HelperApi\";\n\nexport const DepartmentsContext = createContext();\n\nexport const DepartmentsProvider = ({ children }) => {\n  const [departments, setDepartments] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    setDepartments(getCollection('departments'));\n    setEmployees(getCollection('employees'));\n  }, []);\n\n  return (\n    <DepartmentsContext.Provider\n      value={{\n        departments,\n        setDepartments,\n        employees,\n        setEmployees\n      }}\n    >\n      {children}\n    </DepartmentsContext.Provider>\n  );\n};\n","import { Header, Grid, Icon, Table } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getCollection } from \"../../helper/HelperApi\";\n\nconst EmployeeDetails = () => {\n  const [employees, setEmployees] = useState(null);\n\n  useEffect(() => {\n    let collection = getCollection(\"employees\");\n    setEmployees(collection);\n    console.log(collection);\n  }, []);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={6}>\n          <Header as=\"h3\">Employee Details</Header>\n          <p>Emplyee details and some more actions</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={6}>\n          <Link to=\"/updateEmployee\" className=\"ui primary button\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <Table color=\"blue\" key=\"employeesTable\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>ID</Table.HeaderCell>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell>Email</Table.HeaderCell>\n                <Table.HeaderCell>Phone Number</Table.HeaderCell>\n                <Table.HeaderCell>Position</Table.HeaderCell>\n                <Table.HeaderCell>Action</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {employees &&\n                employees.map(({ id, name, email, phoneNumber, position }) => {\n                  return (\n                    <Table.Row key={id}>\n                      <Table.Cell>{id}</Table.Cell>\n                      <Table.Cell>{name}</Table.Cell>\n                      <Table.Cell>{email}</Table.Cell>\n                      <Table.Cell>{phoneNumber}</Table.Cell>\n                      <Table.Cell>{position}</Table.Cell>\n                      <Table.Cell>\n                        <Link to={`/updateEmployee/${id}`} className=\"ui primary button\">\n                          <Icon name=\"edit\" /> Edit\n                        </Link>\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default EmployeeDetails;\n","import {\n  Header,\n  Container,\n  Form,\n  Grid,\n  Input,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useEffect, useState, useContext } from \"react\";\nimport {\n  saveEmployee,\n  getObjectById,\n  updateEmployeeInfo,\n} from \"../../helper/HelperApi\";\n\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\n\nconst AddUpdateEmployee = () => {\n  let history = useHistory();\n  const { employees, setEmployees } = useContext(DepartmentsContext);\n\n  const [employee, setEmployee] = useState({});\n  const [updateAction, setUpdateAction] = useState(false);\n\n  let { id } = useParams();\n\n  useEffect(() => {\n    const existingInfo = getObjectById(employees, +id);\n    if (existingInfo && existingInfo.email) {\n      setEmployee({ ...existingInfo });\n      setUpdateAction(true);\n    }\n  }, [id, employees]);\n\n  const handleChange = (e) => {\n    let emp = employee;\n    emp[e.target.name] = e.target.value;\n    setEmployee(emp);\n    console.log(id);\n  };\n\n  const handleSubmit = () => {\n    let emp = employee;\n    let result = {};\n    if (updateAction) {\n      result = updateEmployeeInfo(emp);\n    } else {\n      result = saveEmployee(\"employees\", emp);\n    }\n    if (!result.error) {\n      setEmployees(result.collection);\n    }\n    history.push(\"/employee\");\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">{id ? \"Update\" : \"Add\"} Employee Details </Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Name\"\n                name=\"name\"\n                defaultValue={(updateAction && employee && employee.name) || \"\"}\n                placeholder=\"joe schmoe\"\n                onChange={handleChange}\n              />\n              <Form.Field\n                id=\"phone-number\"\n                control={Input}\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                defaultValue={\n                  (updateAction && employee && employee.phoneNumber) || \"\"\n                }\n                onChange={handleChange}\n              />\n              <Form.Field\n                id=\"email\"\n                control={Input}\n                label=\"Email\"\n                name=\"email\"\n                defaultValue={\n                  (updateAction && employee && employee.email) || \"\"\n                }\n                placeholder=\"joe@schmoe.com\"\n                onChange={handleChange}\n              />\n              <button className=\"ui primary button\" onClick={handleSubmit}>Save</button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddUpdateEmployee;\n","import { Header, Grid, Icon, Table } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport { getObjectById } from \"../../helper/HelperApi\";\n\nconst DepartmentDetails = () => {\n  const { departments, employees } = useContext(DepartmentsContext);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={6}>\n          <Header as=\"h3\">Departments Details</Header>\n          <p>Departments details and some more actions</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={6}>\n          <Link to=\"/AddDepartment\" className=\"ui primary button mini\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <Table color=\"blue\" key=\"departmentsTable\">\n            <Table.Header>\n              <Table.Row>\n                {[\"ID\", \"Department Name\", \"Head\", \"Action\"].map((title) => {\n                  return (\n                    <Table.HeaderCell key={title}>{title}</Table.HeaderCell>\n                  );\n                })}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {departments &&\n                departments.map(({ name, id, teams, head }) => {\n                  return (\n                    <Table.Row key={id}>\n                      <Table.Cell>{id}</Table.Cell>\n                      <Table.Cell>{name}</Table.Cell>\n                      <Table.Cell>{getObjectById(employees, head).name}</Table.Cell>\n                      <Table.Cell>\n                        <Link\n                          to={`/departmentDetails/${id}`}\n                          className=\"ui primary button mini\"\n                        >\n                          <Icon name=\"eye\" /> View\n                        </Link>\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default DepartmentDetails;\n","import { useState, useContext, useEffect } from \"react\";\nimport { Header, Grid, Container, Form, Input, Select, Message } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { saveDepartment, filterEmployees } from \"../../helper/HelperApi\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\n\nconst DepartmentForm = () => {\n  let history = useHistory();\n\n  const { employees, setDepartments, setEmployees } = useContext(DepartmentsContext);\n\n  const [departmentInfo, setDepartmentInfo] = useState({});\n  const [empOptions, setEmpOtions] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const empOptions = filterEmployees(employees);\n    setEmpOtions(empOptions);\n  }, [employees]);\n\n  const handleChange = (e, { name, value }) => {\n    const depInfo = departmentInfo;\n    departmentInfo[name] = value\n    setDepartmentInfo(depInfo);\n  };\n\n  const handleSubmit = (e) => {\n    if (departmentInfo) {\n      const result = saveDepartment(departmentInfo);\n      if (result.error) {\n        setError(true);\n      } else {\n        setEmployees(result.employees);\n        setDepartments(result.departments);\n        history.push(\"/departments\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">Add Department Details</Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Department Name\"\n                name=\"departmentName\"\n                onChange={handleChange}\n              />\n\n              <Form.Field\n                control={Select}\n                label=\"Department Head\"\n                placeholder=\"Department Head\"\n                name=\"departmentHead\"\n                options={empOptions}\n                search\n                selection\n                onChange={handleChange}\n              />\n              {error && <Message info header='Department already exists.' content=\"\" />}\n              <button className=\"ui primary button\" onClick={handleSubmit} >\n                Save\n              </button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default DepartmentForm;\n","import { Header, Grid, Icon, Table, List } from \"semantic-ui-react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useContext, useState } from \"react\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport { getObjectById } from \"../../helper/HelperApi\";\n\nconst TeamDetails = () => {\n  const { departments, employees } = useContext(DepartmentsContext);\n  const { id: departmentId } = useParams();\n\n  const [departmentInfo] = useState(getObjectById(departments, departmentId));\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={6}>\n          <Header as=\"h3\">{departmentInfo && departmentInfo.name}</Header>\n          <p>Below are the team details present under this department</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={6}>\n          <Link to={`/addTeam/${departmentId}`} className=\"ui primary button mini\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <Table color=\"blue\" key=\"departmentsTable\">\n            <Table.Header>\n              <Table.Row>\n                {[\"ID\", \"Team Name\", \"Team Leader\", \"Team Members\", \"Action\"].map((title) => {\n                  return (\n                    <Table.HeaderCell key={title}>{title}</Table.HeaderCell>\n                  );\n                })}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {departmentInfo &&\n                departmentInfo.teams.map(({ name, id, teamLeader, teamMembers }) => {\n                  return (\n                    <Table.Row key={id}>\n                      <Table.Cell>{id}</Table.Cell>\n                      <Table.Cell>{name}</Table.Cell>\n                      <Table.Cell>{getObjectById(employees, teamLeader).name}</Table.Cell>\n                      <Table.Cell>\n                        <List key={id} items={teamMembers.map(mem => {\n                          return getObjectById(employees, mem).name\n                        })} />\n                      </Table.Cell>\n                      <Table.Cell>\n                        <Link to={`/updateTeam/${departmentId}/${id}`} className=\"ui primary button mini\">\n                          <Icon name=\"edit\" /> Edit\n                        </Link>\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default TeamDetails;\n","import { useState, useContext, useEffect } from \"react\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Form,\n  Input,\n  Select,\n  List,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport {\n  saveTeam,\n  getExistingTeam,\n  getObjectById,\n  updateTeam,\n  filterEmployees,\n} from \"../../helper/HelperApi\";\n\nconst TeamForm = () => {\n  const history = useHistory();\n  const { departmentId, teamId } = useParams();\n\n  const { departments, setDepartments, employees, setEmployees } =\n    useContext(DepartmentsContext);\n\n  const [teamInfo, setTeamInfo] = useState({ departmentId: +departmentId });\n  const [employeesOptions, setEmployeesOptions] = useState([]);\n  const [leaderOptions, setLeaderOptions] = useState([]);\n  const [updateAction, setUpdateAction] = useState(false);\n\n  useEffect(() => {\n    const empOptions = filterEmployees(employees, teamId, departmentId);\n    setEmployeesOptions(empOptions);\n    setLeaderOptions(empOptions);\n  }, [employees, departmentId, teamId, departments]);\n\n  useEffect(() => {\n    const existingInfo = getExistingTeam(departmentId, teamId, departments);\n    if (existingInfo.id) {\n      setTeamInfo(existingInfo);\n      setUpdateAction(true);\n      console.log(teamInfo);\n    }\n  }, [employees, departmentId, teamId, departments, teamInfo]);\n\n  const handleChange = (e, { name, value }) => {\n    const team = teamInfo;\n    team[name] = value;\n    setTeamInfo(team);\n    console.log(teamInfo);\n    if (name === \"teamLeader\") {\n      const filterEmployeesOptions = filterEmployees(\n        employees,\n        teamId,\n        departmentId\n      ).filter((emp) => {\n        return emp.value !== value;\n      });\n      setEmployeesOptions(filterEmployeesOptions);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    let result;\n    if (updateAction) {\n      result = updateTeam(teamInfo);\n    } else {\n      result = saveTeam(teamInfo);\n    }\n    setEmployees(result.updatedEmployees);\n    setDepartments(result.updatedDepartments);\n    history.push(`/departmentDetails/${departmentId}`);\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">\n          {teamId && departmentId ? \"Update\" : \"Add\"} Team Details\n        </Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Team Name\"\n                name=\"name\"\n                defaultValue={(updateAction && teamInfo.name) || \"\"}\n                onChange={handleChange}\n              />\n              {updateAction && teamInfo && teamInfo.teamLeader && (\n                <p>Old team leader : {getObjectById(employees, teamInfo.teamLeader).name}</p>\n              )}\n              <Form.Field\n                control={Select}\n                label=\"Team Leader\"\n                name=\"teamLeader\"\n                options={leaderOptions}\n                placeholder=\"Team Leader\"\n                search\n                onChange={handleChange}\n              />\n              {updateAction && teamInfo && teamInfo.teamMembers.length && (\n                <>\n                  <List.Item as=\"li\" value=\"*\">\n                    Old team members\n                    <List.Item as=\"ol\">\n                      {teamInfo.teamMembers.map((mem) => {\n                        return (\n                          <List.Item key={mem.id} as=\"li\" value=\"-\">\n                            {getObjectById(employees, mem).name}\n                          </List.Item>\n                        );\n                      })}\n                    </List.Item>\n                  </List.Item>\n                </>\n              )}\n              <Form.Dropdown\n                control={Select}\n                label=\"Team Members\"\n                placeholder=\"Team Memebers\"\n                name=\"teamMembers\"\n                options={employeesOptions}\n                search\n                multiple\n                selection\n                onChange={handleChange}\n              />\n\n              <button className=\"ui primary button\" onClick={handleSubmit}>\n                Save\n              </button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default TeamForm;\n","import \"semantic-ui-css/semantic.min.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { List, Divider, Header, Grid } from \"semantic-ui-react\";\n\nimport { DepartmentsProvider } from \"./context/DepartmentsContext\";\n\nimport EmployeeDetails from \"./pages/employee/EmployeeDetails\";\nimport AddUpdateEmployee from \"./pages/employee/AddUpdateEmployee\";\n\nimport DepartmentDetails from \"./pages/department/DepartmentDetails\";\nimport DepartmentForm from \"./pages/department/DepartmentForm\";\nimport TeamDetails from \"./pages/team/TeamDetails\";\nimport TeamForm from \"./pages/team/TeamForm\";\n\nfunction App() {\n  return (\n    <DepartmentsProvider>\n      <div style={{ padding: \"1rem\" }}>\n        <Header as=\"h2\">Employee Management</Header>\n        <Divider />\n        <Router>\n          <Grid>\n            <Grid.Column width={4}>\n              <ListExampleTree />\n            </Grid.Column>\n            <Grid.Column width={12}>\n              <Switch>\n                <Route path=\"/employee\">\n                  <EmployeeDetails />\n                </Route>\n                <Route path=\"/updateEmployee/:id\">\n                  <AddUpdateEmployee />\n                </Route>\n                <Route path=\"/updateEmployee\">\n                  <AddUpdateEmployee />\n                </Route>\n                <Route path=\"/departmentDetails/:id\">\n                  <TeamDetails />\n                </Route>\n                <Route path=\"/addDepartment\">\n                  <DepartmentForm />\n                </Route>\n                <Route path=\"/departments\">\n                  <DepartmentDetails />\n                </Route>\n                <Route path=\"/addTeam/:departmentId\">\n                  <TeamForm />\n                </Route>\n                <Route path=\"/updateTeam/:departmentId/:teamId\">\n                  <TeamForm />\n                </Route>\n              </Switch>\n            </Grid.Column>\n          </Grid>\n        </Router>\n      </div>\n    </DepartmentsProvider>\n  );\n}\n\nconst ListExampleTree = () => (\n  <List>\n    <List.Item>\n      <List.Icon name=\"users\" />\n      <List.Content>\n        <Link to=\"/employee\">\n          <List.Header>Employee Details</List.Header>\n        </Link>\n      </List.Content>\n    </List.Item>\n\n    <List.Item>\n      <List.Icon name=\"user\" />\n      <List.Content>\n        <Link to=\"/departments\">\n          <List.Header>CEO</List.Header>\n        </Link>\n        <List.List>\n          <List.Item>\n            <List.Icon name=\"building\" />\n            <List.Content>\n              <Link to=\"/department/1\">\n                <List.Header>Head of Engineering</List.Header>\n              </Link>\n            </List.Content>\n          </List.Item>\n        </List.List>\n      </List.Content>\n    </List.Item>\n  </List>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}