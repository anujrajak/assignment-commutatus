{"version":3,"sources":["helper/HelperApi.js","context/DepartmentsContext.js","pages/employee/EmployeeDetails.js","pages/employee/AddUpdateEmployee.js","pages/department/DepartmentDetails.js","pages/department/DepartmentForm.js","pages/team/TeamDetails.js","pages/team/TeamForm.js","pages/team/TeamMemberForm.js","components/InfoTree.js","App.js","reportWebVitals.js","index.js"],"names":["getCollection","objectType","collection","localStorage","getItem","toLowerCase","JSON","parse","saveCollection","e","console","log","collectionArr","setItem","stringify","isDepartmentExist","departmentName","some","department","name","isEmployeeExist","email","filter","emp","length","getObjectById","objectId","find","id","filterEmployees","teamId","departmentId","map","key","text","value","DepartmentsContext","createContext","DepartmentsProvider","children","useState","departments","setDepartments","employees","setEmployees","useEffect","Provider","EmployeeDetails","searchResults","setSearchResults","Grid","Column","floated","width","Header","as","to","className","Icon","Table","color","Row","HeaderCell","colSpan","Input","icon","placeholder","onChange","newEmployeeList","employee","Object","values","join","includes","Body","phoneNumber","position","Cell","AddUpdateEmployee","history","useHistory","useContext","setEmployee","updateAction","setUpdateAction","useParams","existingInfo","handleChange","target","Container","Form","Field","control","label","defaultValue","onClick","result","employeeObject","forEach","updateEmployeeInfo","error","push","saveEmployee","DepartmentDetails","title","head","teams","DepartmentForm","departmentInfo","setDepartmentInfo","empOptions","setEmpOtions","setError","depInfo","Select","options","search","selection","Message","info","header","content","departmentHead","departmentObject","saveDepartment","TeamDetails","teamLeader","teamMembers","List","items","mem","TeamForm","teamInfo","setTeamInfo","existingTeamInfo","setExistingTeamInfo","employeesOptions","setEmployeesOptions","leaderOptions","setLeaderOptions","getExistingTeam","team","filterEmployeesOptions","Item","Dropdown","multiple","teamObject","de","te","updatedEmployees","updatedDepartments","updateTeam","obj","saveTeam","TeamMemberForm","action","newMembers","setNewMembers","getExistingTeamEmployees","members","dep","selectedMembers","item","updateTeamMembers","ListItem","route","Content","InfoTree","Divider","App","style","padding","attached","Segment","mobile","tablet","computer","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8debc31c.chunk.js","sourcesContent":["/**\n * It fetches the collection from local storage.\n * @param {String} objectType\n * @returns {Array}\n */\n const getCollection = (objectType) => {\n    if (!objectType) return;\n    let collection = localStorage.getItem(objectType.toLowerCase());\n    try {\n        if (collection) {\n            collection = JSON.parse(collection);\n        } else {\n            collection = [];\n            saveCollection(objectType, collection);\n        }\n    } catch (e) {\n        console.log(e);\n    } finally {\n        return collection;\n    }\n};\n\n/**\n * Sets the item in the local storage.\n * @param {String} objectType\n * @param {Array} collectionArr\n * @returns\n */\nconst saveCollection = (objectType, collectionArr) => {\n    if (!objectType) return;\n    localStorage.setItem(\n        objectType.toLowerCase(),\n        JSON.stringify(collectionArr)\n    );\n};\n\n/**\n * It saves the new department\n * @param {String} departmentName\n * @returns\n */\nconst saveDepartment = ({ departmentName, departmentHead }) => {\n    if (!isDepartmentExist(departmentName)) {\n        const departmentObject = {\n            name: departmentName.toLowerCase(),\n            head: departmentHead,\n            teams: [],\n        };\n        const departments = getCollection(\"departments\");\n        const employees = getCollection(\"employees\");\n        if (departments.length) {\n            departmentObject.id = departments[departments.length - 1].id + 1;\n        } else {\n            departmentObject.id = 1;\n        }\n        departments.push(departmentObject);\n\n        const head = employees.find((emp) => {\n            return emp.id === departmentHead;\n        });\n\n        head.departmentId = departmentObject.id;\n        head.position = \"head\";\n\n        saveCollection(\"employees\", employees);\n        saveCollection(\"departments\", departments);\n        return {\n            employees,\n            departments,\n        };\n    } else {\n        return { error: \"Department already exist.\" };\n    }\n};\n\n/**\n * Checks whether department already exist or not.\n * @param {String} departmentName\n * @returns\n */\nconst isDepartmentExist = (departmentName) => {\n    return getCollection(\"departments\").some((department) => {\n        return department.name === departmentName.toLowerCase();\n    });\n};\n\n/**\n * Checks whether ant object is present or not based on name property.\n * @param {String} name\n * @param {Array} collection\n * @returns {Boolean}\n */\nconst isObjectExist = (name, collection) => {\n    return collection.some((obj) => {\n        return obj.name === name.toLowerCase();\n    });\n};\n\n/**\n * Checks whether employee already exist in the collection or not.\n * @param {EmployeeObject} employee object\n * @returns {Boolean}\n */\nconst isEmployeeExist = ({ email }) => {\n    return getCollection(\"employees\").filter((emp) => {\n        return email && email.toLowerCase() === emp.email.toLowerCase();\n    }).length;\n};\n\n/**\n * Saves the new object in collection.\n * @param {String} objectType Collection type\n * @param {EmployeeObject} employeeObject to be saved\n */\nconst saveEmployee = (objectType = \"employees\", employeeObject) => {\n    if (!isEmployeeExist(employeeObject)) {\n        let collection = getCollection(objectType);\n        if (collection.length) {\n            employeeObject.id = collection[collection.length - 1].id + 1;\n        } else {\n            employeeObject.id = 1;\n        }\n        collection.push(employeeObject);\n        saveCollection(\"employees\", collection);\n        return { collection };\n    } else {\n        return { error: \"Employee already exist.\" };\n    }\n};\n\n/**\n * Updates the employee information in collection.\n * @param {EmployeeObject} employeeObject\n */\nconst updateEmployeeInfo = (employeeObject) => {\n    const collection = getCollection(\"employees\");\n    if (collection.length) {\n        collection.forEach((emp) => {\n            if (employeeObject.id === emp.id) {\n                emp.name = employeeObject.name;\n                emp.email = employeeObject.email;\n                emp.phoneNumber = employeeObject.phoneNumber;\n            }\n        });\n        saveCollection(\"employees\", collection);\n        return { collection };\n    }\n};\n\n/**\n * Finds the employee object from ID.\n * @param {Number} employeeId\n * @returns EmployeeObject\n */\nconst getEmployeeById = (employeeId, collection) => {\n    return collection.find(({ id }) => {\n        return id === employeeId;\n    });\n};\n\n/**\n * Finds the object object from ID.\n * @param {Number} employeeId\n * @returns EmployeeObject\n */\nconst getObjectById = (collection, objectId) => {\n    return collection.find(({ id }) => {\n        return id === +objectId;\n    });\n};\n\nconst getExistingTeam = (departmentId, teamId, collection) => {\n    const department = getObjectById(collection, +departmentId);\n    if (department) {\n        const team = getObjectById(department.teams, +teamId);\n\n        return team ? team : {};\n    }\n\n    return {};\n};\n\n/**\n * Store team data.\n * @param {Object} teamObject\n * @returns {Object}\n */\nconst saveTeam = (teamObject) => {\n    const departments = getCollection(\"departments\");\n\n    const department = departments.find((de) => {\n        return de.id === teamObject.departmentId;\n    });\n    const employees = getCollection(\"employees\");\n    if (!isObjectExist(teamObject.name, department.teams)) {\n        const teams = department.teams;\n        if (teams.length) {\n            teamObject.id = teams[teams.length - 1].id + 1;\n        } else {\n            teamObject.id = 1;\n        }\n        department.teams.push(teamObject);\n\n        const selectedMembers = employees.filter(({ id }) => {\n            return (\n                teamObject.teamMembers.includes(id) ||\n                id === teamObject.teamLeader\n            );\n        });\n\n        selectedMembers.forEach((emp) => {\n            if (teamObject.teamLeader === emp.id) {\n                emp.position = \"team leader\";\n            } else {\n                emp.position = \"team member\";\n            }\n            emp.departmentId = teamObject.departmentId;\n            emp.teamId = teamObject.id;\n        });\n    }\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    };\n};\n\nconst updateTeam = (teamObject) => {\n    const departments = getCollection(\"departments\");\n    const employees = getCollection(\"employees\");\n\n    const department = departments.find((de) => {\n        return de.id === teamObject.departmentId;\n    });\n\n    // fetch old team info in order to update the info\n    // like teamLeader and teamMembers\n    const team = department.teams.find((te) => {\n        return te.id === teamObject.id;\n    });\n\n    // updating position for old memebers and leader\n    const teamLeader = employees.find((emp) => emp.id === team.teamLeader);\n    teamLeader.position = null;\n    teamLeader.teamId = null;\n    teamLeader.departmentId = null;\n    const oldMembers = employees.filter((emp) =>\n        team.teamMembers.includes(emp.id)\n    );\n    oldMembers.forEach((mem) => {\n        teamLeader.position = null;\n        teamLeader.teamId = null;\n        teamLeader.departmentId = null;\n    });\n\n    // updating information for updated members\n    const selectedMembers = employees.filter(({ id }) => {\n        return (\n            teamObject.teamMembers.includes(id) || id === teamObject.teamLeader\n        );\n    });\n\n    selectedMembers.forEach((emp) => {\n        if (teamObject.teamLeader === emp.id) {\n            emp.position = \"team leader\";\n        } else {\n            emp.position = \"team member\";\n        }\n        emp.departmentId = teamObject.departmentId;\n        emp.teamId = teamObject.id;\n    });\n\n    team.name = teamObject.name;\n    team.teamLeader = teamObject.teamLeader;\n    team.teamMembers = teamObject.teamMembers;\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    };\n};\n\nconst getExistingTeamEmployees = (departmentId, teamId) => {\n    if (!departmentId && !teamId) {\n        return [];\n    }\n    const departments = getCollection('departments');\n    const employees = getCollection('employees');\n\n    const department = getObjectById(departments, departmentId);\n    if (department) {\n        const team = getObjectById(department.teams, teamId);\n        if (team) {\n            return employees.filter(emp => {\n                return team.teamMembers.includes(emp.id);\n            }).map(({ id, name }) => {\n                return {\n                    key: id,\n                    text: name,\n                    value: id,\n                };\n            });\n        }\n    }\n\n    return { error: \"Department & Team info not found.\" }\n};\n\n/**\n * Basically I'm creating object for dropdown options\n * @param {*} collection\n * @returns\n */\nconst filterEmployees = (collection, teamId, departmentId) => {\n    return collection\n        .filter((emp) => {\n            return (\n                (!emp.departmentId && !emp.teamId) ||\n                (emp.teamId === +teamId && emp.departmentId === +departmentId)\n            );\n        })\n        .map(({ id, name }) => {\n            return {\n                key: id,\n                text: name,\n                value: id,\n            };\n        });\n};\n\nconst updateTeamMembers = (members, departmentId, teamId, action) => {\n    const departments = getCollection('departments');\n    const employees = getCollection('employees');\n    const department = departments.find(dep => dep.id === +departmentId);\n    const team = department.teams.find(team => team.id === +teamId);\n    const selectedMembers = employees.filter(emp => members.includes(emp.id));\n\n    if (action === 'add') {\n        // Updating the members details like position.\n        selectedMembers.forEach(emp => {\n            emp.departmentId = +departmentId;\n            emp.teamId = +teamId;\n            emp.position = 'team member';\n        });\n        // Updating the teamMembers property of team.\n        team.teamMembers = [...team.teamMembers, ...members];\n\n    } else if (action === 'remove') {\n        selectedMembers.forEach(emp => {\n            emp.departmentId = null;\n            emp.teamId = null;\n            emp.position = null;\n        });\n        team.teamMembers = team.teamMembers.filter(item => !members.includes(item));\n    }\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    }\n}\n\nexport {\n    getCollection,\n    saveCollection,\n    isEmployeeExist,\n    saveEmployee,\n    getEmployeeById,\n    getObjectById,\n    updateEmployeeInfo,\n    saveDepartment,\n    isDepartmentExist,\n    saveTeam,\n    isObjectExist,\n    getExistingTeam,\n    updateTeam,\n    filterEmployees,\n    updateTeamMembers,\n    getExistingTeamEmployees\n};","import { createContext, useEffect, useState } from \"react\";\nimport { getCollection } from \"../helper/HelperApi\";\n\nexport const DepartmentsContext = createContext();\n\nexport const DepartmentsProvider = ({ children }) => {\n  const [departments, setDepartments] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    setDepartments(getCollection('departments'));\n    setEmployees(getCollection('employees'));\n  }, []);\n\n  return (\n    <DepartmentsContext.Provider\n      value={{\n        departments,\n        setDepartments,\n        employees,\n        setEmployees\n      }}\n    >\n      {children}\n    </DepartmentsContext.Provider>\n  );\n};\n","import { Header, Grid, Icon, Table, Input } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getCollection } from \"../../helper/HelperApi\";\n\nconst EmployeeDetails = () => {\n  const [employees, setEmployees] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    let collection = getCollection(\"employees\");\n    setEmployees(collection);\n    setSearchResults(collection);\n    console.log(collection);\n  }, []);\n\n  /**\n   * Personally I don't think this is the correct way to implement\n   * the searching but I want to avoid any other npm package so\n   * implemented this logic.\n   */\n  const searchEmployee = (e, { value }) => {\n    if (value) {\n      const newEmployeeList = employees.filter((employee) => {\n        return Object.values(employee)\n          .join(\" \")\n          .toLowerCase()\n          .includes(value.toLowerCase());\n      });\n      setSearchResults(newEmployeeList);\n    } else {\n      setSearchResults(employees);\n    }\n  };\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={13}>\n          <Header as=\"h3\">Employee Details</Header>\n          <p>Emplyee details and some more actions</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={3}>\n          <Link to=\"/updateEmployee\" className=\"ui primary right floated button mini\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Table key=\"employeesTable\" color=\"blue\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan={5}>\n                  <p>Please enter any employee details to search.</p>\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  <Input\n                    icon=\"search\"\n                    placeholder=\"Search...\"\n                    className=\"mini\"\n                    onChange={searchEmployee}\n                  />\n                </Table.HeaderCell>\n              </Table.Row>\n              <Table.Row>\n                <Table.HeaderCell>ID</Table.HeaderCell>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell>Email</Table.HeaderCell>\n                <Table.HeaderCell>Phone Number</Table.HeaderCell>\n                <Table.HeaderCell>Position</Table.HeaderCell>\n                <Table.HeaderCell>Action</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {searchResults &&\n                searchResults.map(\n                  ({ id, name, email, phoneNumber, position }) => {\n                    return (\n                      <Table.Row key={id}>\n                        <Table.Cell>{id}</Table.Cell>\n                        <Table.Cell>{name}</Table.Cell>\n                        <Table.Cell>{email}</Table.Cell>\n                        <Table.Cell>{phoneNumber}</Table.Cell>\n                        <Table.Cell>{position}</Table.Cell>\n                        <Table.Cell>\n                          <Link\n                            to={`/updateEmployee/${id}`}\n                            className=\"ui primary center floated button mini\"\n                          >\n                            <Icon name=\"edit\" /> Edit\n                          </Link>\n                        </Table.Cell>\n                      </Table.Row>\n                    );\n                  }\n                )}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default EmployeeDetails;\n","import {\n  Header,\n  Container,\n  Form,\n  Grid,\n  Input,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useEffect, useState, useContext } from \"react\";\nimport {\n  saveEmployee,\n  getObjectById,\n  updateEmployeeInfo,\n} from \"../../helper/HelperApi\";\n\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\n\nconst AddUpdateEmployee = () => {\n  let history = useHistory();\n  const { employees, setEmployees } = useContext(DepartmentsContext);\n\n  const [employee, setEmployee] = useState({});\n  const [updateAction, setUpdateAction] = useState(false);\n\n  let { id } = useParams();\n\n  useEffect(() => {\n    const existingInfo = getObjectById(employees, +id);\n    if (existingInfo && existingInfo.email) {\n      setEmployee({ ...existingInfo });\n      setUpdateAction(true);\n    }\n  }, [id, employees]);\n\n  const handleChange = (e) => {\n    let emp = employee;\n    emp[e.target.name] = e.target.value;\n    setEmployee(emp);\n    console.log(id);\n  };\n\n  const handleSubmit = () => {\n    let emp = employee;\n    let result = {};\n    if (updateAction) {\n      result = updateEmployeeInfo(emp);\n    } else {\n      result = saveEmployee(\"employees\", emp);\n    }\n    if (!result.error) {\n      setEmployees(result.collection);\n    }\n    history.push(\"/employee\");\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">{id ? \"Update\" : \"Add\"} Employee Details </Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Name\"\n                name=\"name\"\n                defaultValue={(updateAction && employee && employee.name) || \"\"}\n                placeholder=\"joe schmoe\"\n                onChange={handleChange}\n              />\n              <Form.Field\n                id=\"phone-number\"\n                control={Input}\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                defaultValue={\n                  (updateAction && employee && employee.phoneNumber) || \"\"\n                }\n                onChange={handleChange}\n              />\n              <Form.Field\n                id=\"email\"\n                control={Input}\n                label=\"Email\"\n                name=\"email\"\n                defaultValue={\n                  (updateAction && employee && employee.email) || \"\"\n                }\n                placeholder=\"joe@schmoe.com\"\n                onChange={handleChange}\n              />\n              <button className=\"ui primary button\" onClick={handleSubmit}>Save</button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddUpdateEmployee;\n","import { Header, Grid, Icon, Table } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport { getObjectById } from \"../../helper/HelperApi\";\n\nconst DepartmentDetails = () => {\n  const { departments, employees } = useContext(DepartmentsContext);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={13}>\n          <Header as=\"h3\">Departments Details</Header>\n          <p>Departments details and some more actions</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={3}>\n          <Link to=\"/AddDepartment\" className=\"ui primary right floated button mini\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Table color=\"blue\" key=\"departmentsTable\">\n            <Table.Header>\n              <Table.Row>\n                {[\"ID\", \"Department Name\", \"Head\", \"Action\"].map((title) => {\n                  return (\n                    <Table.HeaderCell key={title}>{title}</Table.HeaderCell>\n                  );\n                })}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {departments &&\n                departments.map(({ name, id, teams, head }) => {\n                  return (\n                    <Table.Row key={id}>\n                      <Table.Cell>{id}</Table.Cell>\n                      <Table.Cell>{name}</Table.Cell>\n                      <Table.Cell>{getObjectById(employees, head).name}</Table.Cell>\n                      <Table.Cell>\n                        <Link\n                          to={`/departmentDetails/${id}`}\n                          className=\"ui primary button mini\"\n                        >\n                          <Icon name=\"eye\" /> View\n                        </Link>\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default DepartmentDetails;\n","import { useState, useContext, useEffect } from \"react\";\nimport { Header, Grid, Container, Form, Input, Select, Message } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { saveDepartment, filterEmployees } from \"../../helper/HelperApi\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\n\nconst DepartmentForm = () => {\n  let history = useHistory();\n\n  const { employees, setDepartments, setEmployees } = useContext(DepartmentsContext);\n\n  const [departmentInfo, setDepartmentInfo] = useState({});\n  const [empOptions, setEmpOtions] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const empOptions = filterEmployees(employees);\n    setEmpOtions(empOptions);\n  }, [employees]);\n\n  const handleChange = (e, { name, value }) => {\n    const depInfo = departmentInfo;\n    departmentInfo[name] = value\n    setDepartmentInfo(depInfo);\n  };\n\n  const handleSubmit = (e) => {\n    if (departmentInfo) {\n      const result = saveDepartment(departmentInfo);\n      if (result.error) {\n        setError(true);\n      } else {\n        setEmployees(result.employees);\n        setDepartments(result.departments);\n        history.push(\"/departments\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">Add Department Details</Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Department Name\"\n                name=\"departmentName\"\n                onChange={handleChange}\n              />\n\n              <Form.Field\n                control={Select}\n                label=\"Department Head\"\n                placeholder=\"Department Head\"\n                name=\"departmentHead\"\n                options={empOptions}\n                search\n                selection\n                onChange={handleChange}\n              />\n              {error && <Message info header='Department already exists.' content=\"\" />}\n              <button className=\"ui primary button\" onClick={handleSubmit} >\n                Save\n              </button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default DepartmentForm;\n","import { Header, Grid, Icon, Table, List } from \"semantic-ui-react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport { getObjectById } from \"../../helper/HelperApi\";\n\nconst TeamDetails = () => {\n  const { departments, employees } = useContext(DepartmentsContext);\n  const { id: departmentId } = useParams();\n\n  const [departmentInfo, setDepartmentInfo] = useState();\n\n  useEffect(() => {\n    setDepartmentInfo(getObjectById(departments, +departmentId));\n  }, [departments, departmentId])\n\n  return (\n    <>\n      {departmentInfo && (<div>\n        <Grid>\n          <Grid.Column floated=\"left\" width={13}>\n            <Header as=\"h3\">{departmentInfo && departmentInfo.name}</Header>\n            <p>Below are the team details of selected present under this department</p>\n          </Grid.Column>\n          <Grid.Column floated=\"right\" width={3}>\n            <Link to={`/addTeam/${departmentId}`} className=\"ui primary right floated button mini\">\n              <Icon name=\"plus\" /> New\n            </Link>\n          </Grid.Column>\n          <Grid.Column width={16}>\n            <Table color=\"blue\" key=\"departmentsTable\">\n              <Table.Header>\n                <Table.Row>\n                  {[\"ID\", \"Team Name\", \"Team Leader\", \"Team Members\", \"Action\"].map((title) => {\n                    return (\n                      <Table.HeaderCell key={title}>{title}</Table.HeaderCell>\n                    );\n                  })}\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {departmentInfo &&\n                  departmentInfo.teams.map(({ name, id, teamLeader, teamMembers }) => {\n                    return (\n                      <Table.Row key={id}>\n                        <Table.Cell>{id}</Table.Cell>\n                        <Table.Cell>{name}</Table.Cell>\n                        <Table.Cell>{getObjectById(employees, teamLeader).name}</Table.Cell>\n                        <Table.Cell>\n                          <List key={id} items={teamMembers.map(mem => {\n                            return getObjectById(employees, mem).name\n                          })} />\n                        </Table.Cell>\n                        <Table.Cell>\n                          <Link to={`/updateTeam/${departmentId}/${id}`} className=\"ui primary button mini\">\n                            Edit\n                          </Link>\n                          <Link to={`/updateMembers/add/${departmentId}/${id}`} className=\"ui orange button mini\">\n                            Add member\n                          </Link>\n                          <Link to={`/updateMembers/remove/${departmentId}/${id}`} className=\"ui red button mini\" color='red'>\n                            Remove member\n                          </Link>\n                        </Table.Cell>\n                      </Table.Row>\n                    );\n                  })}\n              </Table.Body>\n            </Table>\n          </Grid.Column>\n        </Grid>\n      </div>)}\n    </>\n  );\n};\n\nexport default TeamDetails;\n","import { useState, useContext, useEffect } from \"react\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Form,\n  Input,\n  Select,\n  List,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport {\n  saveTeam,\n  getExistingTeam,\n  getObjectById,\n  updateTeam,\n  filterEmployees,\n} from \"../../helper/HelperApi\";\n\nconst TeamForm = () => {\n  const history = useHistory();\n  const { departmentId, teamId } = useParams();\n\n  const { departments, setDepartments, employees, setEmployees } =\n    useContext(DepartmentsContext);\n\n  const [teamInfo, setTeamInfo] = useState({ departmentId: +departmentId });\n  const [existingTeamInfo, setExistingTeamInfo] = useState({});\n  const [employeesOptions, setEmployeesOptions] = useState([]);\n  const [leaderOptions, setLeaderOptions] = useState([]);\n  const [updateAction, setUpdateAction] = useState(false);\n\n  useEffect(() => {\n    const empOptions = filterEmployees(employees, teamId, departmentId);\n    setEmployeesOptions(empOptions);\n    setLeaderOptions(empOptions);\n  }, [employees, departmentId, teamId, departments]);\n\n  useEffect(() => {\n    const existingInfo = getExistingTeam(departmentId, teamId, departments);\n    if (existingInfo.id) {\n      setExistingTeamInfo(existingInfo);\n      setUpdateAction(true);\n\n      //also updating previous id of team\n      const team = teamInfo;\n      team.id = existingInfo.id;\n      team.name = existingInfo.name;\n    }\n  }, [employees, departmentId, teamId, departments, teamInfo]);\n\n  const handleChange = (e, { name, value }) => {\n    const team = teamInfo;\n    team[name] = value;\n    setTeamInfo(team);\n    console.log(teamInfo);\n    if (name === \"teamLeader\") {\n      const filterEmployeesOptions = filterEmployees(\n        employees,\n        teamId,\n        departmentId\n      ).filter((emp) => {\n        return emp.value !== value;\n      });\n      setEmployeesOptions(filterEmployeesOptions);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    let result;\n    if (updateAction) {\n      result = updateTeam(teamInfo);\n    } else {\n      result = saveTeam(teamInfo);\n    }\n    setEmployees(result.updatedEmployees);\n    setDepartments(result.updatedDepartments);\n    history.push(`/departmentDetails/${departmentId}`);\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">\n          {teamId && departmentId ? \"Update\" : \"Add\"} Team Details\n        </Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Team Name\"\n                name=\"name\"\n                defaultValue={(updateAction && existingTeamInfo.name) || \"\"}\n                onChange={handleChange}\n              />\n              {updateAction && existingTeamInfo && existingTeamInfo.teamLeader && (\n                <p>Old team leader : {getObjectById(employees, existingTeamInfo.teamLeader).name}</p>\n              )}\n              <Form.Field\n                control={Select}\n                label=\"Team Leader\"\n                name=\"teamLeader\"\n                options={leaderOptions}\n                placeholder=\"Team Leader\"\n                search\n                onChange={handleChange}\n              />\n              {updateAction && existingTeamInfo && existingTeamInfo.teamMembers.length && (\n                <>\n                  <p>Old team members</p>\n                    <List.Item as=\"ol\" key={existingTeamInfo.id}>\n                      {existingTeamInfo.teamMembers.map((mem) => {\n                        return (\n                          <List.Item key={mem} as=\"li\" value=\"-\">\n                            {getObjectById(employees, mem).name}\n                          </List.Item>\n                        );\n                      })}\n                    </List.Item>\n                </>\n              )}\n              <Form.Dropdown\n                control={Select}\n                label=\"Team Members\"\n                placeholder=\"Team Memebers\"\n                name=\"teamMembers\"\n                options={employeesOptions}\n                search\n                multiple\n                selection\n                onChange={handleChange}\n              />\n\n              <button className=\"ui primary button\" onClick={handleSubmit}>\n                Save\n              </button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default TeamForm;\n","import { useState, useEffect, useContext } from \"react\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Form,\n  Select,\n  Message,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport {\n  filterEmployees,\n  updateTeamMembers,\n  getExistingTeamEmployees,\n} from \"../../helper/HelperApi\";\n\nconst TeamMemberForm = () => {\n  const history = useHistory();\n  const { action, departmentId, teamId } = useParams();\n\n  const { employees, setDepartments, setEmployees } =\n    useContext(DepartmentsContext);\n  const [employeesOptions, setEmployeesOptions] = useState([]);\n  const [newMembers, setNewMembers] = useState([]);\n\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (action === \"add\") {\n      const empOptions = filterEmployees(employees);\n      setEmployeesOptions(empOptions);\n    } else if (action === \"remove\") {\n      const result = getExistingTeamEmployees(departmentId, teamId);\n      if (result.error) {\n        setError(result.error);\n      } else {\n        setEmployeesOptions(result);\n      }\n    }\n  }, [employees, departmentId, teamId, action]);\n\n  const handleChange = (e, { name, value }) => {\n    setNewMembers(value);\n    console.log(newMembers);\n  };\n\n  const handleSubmit = (e) => {\n    const { updatedEmployees, updatedDepartments } = updateTeamMembers(\n      newMembers,\n      departmentId,\n\t\t\tteamId,\n\t\t\taction\n    );\n    setDepartments(updatedDepartments);\n    setEmployees(updatedEmployees);\n    history.push(`/departmentDetails/${departmentId}`);\n  };\n\n  return (\n    <Container>\n      {!error ? (\n        <>\n          <Header as=\"h3\">\n            {action === \"add\" ? \"Add new\" : \"Remove\"} team members\n          </Header>\n          <p>\n            You can {action === \"add\" ? \"add\" : \"remove\"} multiple team members\n            in the existing team.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tBelow field is showing all the employees which are\n\t\t\t\t\t\t{action === \"add\" ? \" not assigned into any teams.\" : \" present in the team.\"}\n          </p>\n          <Grid>\n            <Grid.Column width={8}>\n              <Form>\n                <Form.Select\n                  control={Select}\n                  label=\"Team Members\"\n                  placeholder=\"Team Memebers\"\n                  name=\"teamMembers\"\n                  options={employeesOptions}\n                  search\n                  multiple\n                  onChange={handleChange}\n                />\n                <button className=\"ui primary button\" onClick={handleSubmit}>\n                  Save\n                </button>\n              </Form>\n            </Grid.Column>\n          </Grid>\n        </>\n      ) : (\n        <Message info header={error} content=\"\" />\n      )}\n    </Container>\n  );\n};\n\nexport default TeamMemberForm;\n","import {\n  List,\n  Divider\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DepartmentsContext } from \"../context/DepartmentsContext\";\nimport { useContext } from \"react\";\n\nconst InfoTree = () => {\n  const { departments } = useContext(DepartmentsContext);\n\n  return (\n    <List>\n      <ListItem icon=\"users\" label=\"Employee Details\" route=\"/employee\" id=\"usersList\" />\n      <Divider />\n      <List.Item key=\"deps&teams\">\n        <List.Icon name=\"user\" />\n        <List.Content>\n          <Link to=\"/departments\">\n            <List.Header>CEO</List.Header>\n          </Link>\n\t\t\t\t\t<List.List key=\"departments\">\n\t\t\t\t\t\t{departments && departments.map(department => {\n\t\t\t\t\t\t\treturn <ListItem\n\t\t\t\t\t\t\t\tid={department.id}\n\t\t\t\t\t\t\t\tlabel={department.name}\n\t\t\t\t\t\t\t\ticon='building'\n\t\t\t\t\t\t\t\troute={`/departmentDetails/${department.id}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</List.List>\n        </List.Content>\n      </List.Item>\n    </List>\n  );\n};\n\nconst ListItem = ({ id, icon, route, label }) => {\n  return (\n    <List.Item key={id}>\n      <List.Icon name={icon} />\n      <List.Content>\n        <Link to={route}>\n          <List.Header>{label}</List.Header>\n\t\t\t\t</Link>\n      </List.Content>\n    </List.Item>\n  );\n};\n\nexport default InfoTree;\n","import \"semantic-ui-css/semantic.min.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport { DepartmentsProvider } from \"./context/DepartmentsContext\";\n\nimport EmployeeDetails from \"./pages/employee/EmployeeDetails\";\nimport AddUpdateEmployee from \"./pages/employee/AddUpdateEmployee\";\n\nimport DepartmentDetails from \"./pages/department/DepartmentDetails\";\nimport DepartmentForm from \"./pages/department/DepartmentForm\";\nimport TeamDetails from \"./pages/team/TeamDetails\";\nimport TeamForm from \"./pages/team/TeamForm\";\nimport TeamMemberForm from \"./pages/team/TeamMemberForm\";\n\nimport InfoTree from \"./components/InfoTree\";\n\nfunction App() {\n  return (\n    <DepartmentsProvider>\n      <Container style={{ padding: \"1rem\" }}>\n        <Header as=\"h2\" attached=\"top\">\n          React Assignment\n        </Header>\n        <Segment attached>\n          <Router>\n            <Grid>\n              <Grid.Column mobile={16} tablet={4} computer={4}>\n                <InfoTree />\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={12} computer={12}>\n                <Switch>\n                  <Route path=\"/employee\">\n                    <EmployeeDetails />\n                  </Route>\n                  <Route path=\"/updateEmployee/:id\">\n                    <AddUpdateEmployee />\n                  </Route>\n                  <Route path=\"/updateEmployee\">\n                    <AddUpdateEmployee />\n                  </Route>\n                  <Route path=\"/departmentDetails/:id\">\n                    <TeamDetails />\n                  </Route>\n                  <Route path=\"/addDepartment\">\n                    <DepartmentForm />\n                  </Route>\n                  <Route path=\"/departments\">\n                    <DepartmentDetails />\n                  </Route>\n                  <Route path=\"/addTeam/:departmentId\">\n                    <TeamForm />\n                  </Route>\n                  <Route path=\"/updateTeam/:departmentId/:teamId\">\n                    <TeamForm />\n                  </Route>\n                  <Route path=\"/updateMembers/:action/:departmentId/:teamId\">\n                    <TeamMemberForm />\n                  </Route>\n                </Switch>\n              </Grid.Column>\n            </Grid>\n          </Router>\n        </Segment>\n      </Container>\n    </DepartmentsProvider>\n  );\n}\n\n// const ListExampleTree = () => (\n//   <List>\n//     <List.Item>\n//       <List.Icon name=\"users\" />\n//       <List.Content>\n//         <Link to=\"/employee\">\n//           <List.Header>Employee Details</List.Header>\n//         </Link>\n//       </List.Content>\n//     </List.Item>\n//     <Divider />\n//     <List.Item>\n//       <List.Icon name=\"user\" />\n//       <List.Content>\n//         <Link to=\"/departments\">\n//           <List.Header>CEO</List.Header>\n//         </Link>\n//         <List.List>\n//           <List.Item>\n//             <List.Icon name=\"building\" />\n//             <List.Content>\n//               <Link to=\"/departmentDetails/2\">\n//                 <List.Header>Head of Engineering</List.Header>\n//               </Link>\n//             </List.Content>\n//           </List.Item>\n//         </List.List>\n//       </List.Content>\n//     </List.Item>\n//   </List>\n// );\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}