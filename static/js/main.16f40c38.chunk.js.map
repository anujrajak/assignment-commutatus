{"version":3,"sources":["helper/HelperApi.js","context/DepartmentsContext.js","pages/employee/EmployeeDetails.js","pages/employee/AddUpdateEmployee.js","pages/department/DepartmentDetails.js","pages/department/DepartmentForm.js","pages/team/TeamDetails.js","pages/team/TeamForm.js","pages/team/TeamMemberForm.js","components/InfoTree.js","App.js","reportWebVitals.js","index.js"],"names":["getCollection","objectType","collection","localStorage","getItem","toLowerCase","JSON","parse","saveCollection","e","console","log","collectionArr","setItem","stringify","isDepartmentExist","departmentName","some","department","name","isEmployeeExist","email","filter","emp","length","getObjectById","objectId","find","id","filterEmployees","teamId","departmentId","map","key","text","value","DepartmentsContext","createContext","DepartmentsProvider","children","useState","departments","setDepartments","employees","setEmployees","useEffect","deps","emps","data","defaultDepartmentData","loadDepartmentsData","defaultEmployeesData","loadEmployeesData","Provider","EmployeeDetails","searchResults","setSearchResults","Grid","Column","floated","width","Header","as","to","className","Icon","Table","color","Row","HeaderCell","colSpan","Input","icon","placeholder","onChange","newEmployeeList","employee","Object","values","join","includes","Body","phoneNumber","position","Cell","AddUpdateEmployee","history","useHistory","useContext","setEmployee","updateAction","setUpdateAction","useParams","existingInfo","handleChange","target","Container","Form","Field","control","label","defaultValue","onClick","result","employeeObject","forEach","updateEmployeeInfo","error","push","saveEmployee","DepartmentDetails","title","head","teams","DepartmentForm","departmentInfo","setDepartmentInfo","empOptions","setEmpOtions","setError","depInfo","Select","options","search","selection","Message","info","header","content","departmentHead","departmentObject","saveDepartment","TeamDetails","teamLeader","teamMembers","List","items","mem","TeamForm","teamInfo","setTeamInfo","existingTeamInfo","setExistingTeamInfo","employeesOptions","setEmployeesOptions","leaderOptions","setLeaderOptions","getExistingTeam","team","filterEmployeesOptions","Item","Dropdown","multiple","teamObject","de","te","selectedLeader","updatedEmployees","updatedDepartments","updateTeam","obj","saveTeam","TeamMemberForm","action","newMembers","setNewMembers","getExistingTeamEmployees","members","dep","selectedMembers","item","updateTeamMembers","ListItem","route","Content","InfoTree","Divider","App","style","padding","attached","Segment","mobile","tablet","computer","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16f40c38.chunk.js","sourcesContent":["import defaultDepartmentData from \"../data/defaultDepartmentData.json\";\nimport defaultEmployeesData from \"../data/defaultEmployeesData.json\";\n\n/**\n * I will be loading default data in case there is no proper data\n * present in the localStorage\n * @param {*} objectType\n * @returns\n */\nconst loadDepartmentsData = () => {\n    const data = defaultDepartmentData;\n    saveCollection('depatments', data.departments);\n\n    return data.departments;\n}\n\nconst loadEmployeesData = () => {\n    const data = defaultEmployeesData;\n    saveCollection('employees', data.employees);\n\n    return data.employees;\n}\n\n/**\n * It fetches the collection from local storage.\n * @param {String} objectType\n * @returns {Array}\n */\nconst getCollection = (objectType) => {\n    if (!objectType) return;\n    let collection = localStorage.getItem(objectType.toLowerCase());\n    try {\n        if (collection) {\n            collection = JSON.parse(collection);\n        } else {\n            collection = [];\n            saveCollection(objectType, collection);\n        }\n    } catch (e) {\n        console.log(e);\n    } finally {\n        return collection;\n    }\n};\n\n/**\n * Sets the item in the local storage.\n * @param {String} objectType\n * @param {Array} collectionArr\n * @returns\n */\nconst saveCollection = (objectType, collectionArr) => {\n    if (!objectType) return;\n    localStorage.setItem(\n        objectType.toLowerCase(),\n        JSON.stringify(collectionArr)\n    );\n};\n\n/**\n * It saves the new department\n * @param {String} departmentName\n * @returns\n */\nconst saveDepartment = ({ departmentName, departmentHead }) => {\n    if (!isDepartmentExist(departmentName)) {\n        const departmentObject = {\n            name: departmentName.toLowerCase(),\n            head: departmentHead,\n            teams: [],\n        };\n        const departments = getCollection(\"departments\");\n        const employees = getCollection(\"employees\");\n        if (departments.length) {\n            departmentObject.id = departments[departments.length - 1].id + 1;\n        } else {\n            departmentObject.id = 1;\n        }\n        departments.push(departmentObject);\n\n        const head = employees.find((emp) => {\n            return emp.id === departmentHead;\n        });\n\n        head.departmentId = departmentObject.id;\n        head.position = \"head\";\n\n        saveCollection(\"employees\", employees);\n        saveCollection(\"departments\", departments);\n        return {\n            employees,\n            departments,\n        };\n    } else {\n        return { error: \"Department already exist.\" };\n    }\n};\n\n/**\n * Checks whether department already exist or not.\n * @param {String} departmentName\n * @returns\n */\nconst isDepartmentExist = (departmentName) => {\n    return getCollection(\"departments\").some((department) => {\n        return department.name === departmentName.toLowerCase();\n    });\n};\n\n/**\n * Checks whether ant object is present or not based on name property.\n * @param {String} name\n * @param {Array} collection\n * @returns {Boolean}\n */\nconst isObjectExist = (name, collection) => {\n    return collection.some((obj) => {\n        return obj.name === name.toLowerCase();\n    });\n};\n\n/**\n * Checks whether employee already exist in the collection or not.\n * @param {EmployeeObject} employee object\n * @returns {Boolean}\n */\nconst isEmployeeExist = ({ email }) => {\n    return getCollection(\"employees\").filter((emp) => {\n        return email && email.toLowerCase() === emp.email.toLowerCase();\n    }).length;\n};\n\n/**\n * Saves the new object in collection.\n * @param {String} objectType Collection type\n * @param {EmployeeObject} employeeObject to be saved\n */\nconst saveEmployee = (objectType = \"employees\", employeeObject) => {\n    if (!isEmployeeExist(employeeObject)) {\n        let collection = getCollection(objectType);\n        if (collection.length) {\n            employeeObject.id = collection[collection.length - 1].id + 1;\n        } else {\n            employeeObject.id = 1;\n        }\n        collection.push(employeeObject);\n        saveCollection(\"employees\", collection);\n        return { collection };\n    } else {\n        return { error: \"Employee already exist.\" };\n    }\n};\n\n/**\n * Updates the employee information in collection.\n * @param {EmployeeObject} employeeObject\n */\nconst updateEmployeeInfo = (employeeObject) => {\n    const collection = getCollection(\"employees\");\n    if (collection.length) {\n        collection.forEach((emp) => {\n            if (employeeObject.id === emp.id) {\n                emp.name = employeeObject.name;\n                emp.email = employeeObject.email;\n                emp.phoneNumber = employeeObject.phoneNumber;\n            }\n        });\n        saveCollection(\"employees\", collection);\n        return { collection };\n    }\n};\n\n/**\n * Finds the employee object from ID.\n * @param {Number} employeeId\n * @returns EmployeeObject\n */\nconst getEmployeeById = (employeeId, collection) => {\n    return collection.find(({ id }) => {\n        return id === employeeId;\n    });\n};\n\n/**\n * Finds the object object from ID.\n * @param {Number} employeeId\n * @returns EmployeeObject\n */\nconst getObjectById = (collection, objectId) => {\n    return collection.find(({ id }) => {\n        return id === +objectId;\n    });\n};\n\nconst getExistingTeam = (departmentId, teamId, collection) => {\n    const department = getObjectById(collection, +departmentId);\n    if (department) {\n        const team = getObjectById(department.teams, +teamId);\n\n        return team ? team : {};\n    }\n\n    return {};\n};\n\n/**\n * Store team data.\n * @param {Object} teamObject\n * @returns {Object}\n */\nconst saveTeam = (teamObject) => {\n    const departments = getCollection(\"departments\");\n\n    const department = departments.find((de) => {\n        return de.id === teamObject.departmentId;\n    });\n    const employees = getCollection(\"employees\");\n    if (!isObjectExist(teamObject.name, department.teams)) {\n        const teams = department.teams;\n        if (teams.length) {\n            teamObject.id = teams[teams.length - 1].id + 1;\n        } else {\n            teamObject.id = 1;\n        }\n        department.teams.push(teamObject);\n\n        const selectedMembers = employees.filter(({ id }) => {\n            return (\n                teamObject.teamMembers.includes(id) ||\n                id === teamObject.teamLeader\n            );\n        });\n\n        selectedMembers.forEach((emp) => {\n            if (teamObject.teamLeader === emp.id) {\n                emp.position = \"team leader\";\n            } else {\n                emp.position = \"team member\";\n            }\n            emp.departmentId = teamObject.departmentId;\n            emp.teamId = teamObject.id;\n        });\n    }\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    };\n};\n\nconst updateTeam = (teamObject) => {\n    const departments = getCollection(\"departments\");\n    const employees = getCollection(\"employees\");\n\n    const department = departments.find((de) => {\n        return de.id === teamObject.departmentId;\n    });\n\n    // fetch old team info in order to update the info\n    // like teamLeader and teamMembers\n    const team = department.teams.find((te) => {\n        return te.id === teamObject.id;\n    });\n\n    // updating position for old memebers and leader\n    const teamLeader = employees.find((emp) => emp.id === team.teamLeader);\n    teamLeader.position = null;\n    teamLeader.teamId = null;\n    teamLeader.departmentId = null;\n\n    // updating information for updated leader\n    const selectedLeader = employees.find(({ id }) => {\n        return id === teamObject.teamLeader\n    });\n\n    if (selectedLeader) {\n        selectedLeader.position = \"team leader\";\n        selectedLeader.departmentId = teamObject.departmentId;\n        selectedLeader.teamId = teamObject.id;\n    }\n\n    team.name = teamObject.name;\n    if (teamObject.teamLeader) {\n        team.teamLeader = teamObject.teamLeader;\n    }\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    };\n};\n\nconst getExistingTeamEmployees = (departmentId, teamId) => {\n    if (!departmentId && !teamId) {\n        return [];\n    }\n    const departments = getCollection('departments');\n    const employees = getCollection('employees');\n\n    const department = getObjectById(departments, departmentId);\n    if (department) {\n        const team = getObjectById(department.teams, teamId);\n        if (team) {\n            return employees.filter(emp => {\n                return team.teamMembers.includes(emp.id);\n            }).map(({ id, name }) => {\n                return {\n                    key: id,\n                    text: name,\n                    value: id,\n                };\n            });\n        }\n    }\n\n    return { error: \"Department & Team info not found.\" }\n};\n\n/**\n * Basically I'm creating object for dropdown options\n * @param {*} collection\n * @returns\n */\nconst filterEmployees = (collection, teamId, departmentId) => {\n    return collection\n        .filter((emp) => {\n            return (\n                (!emp.departmentId && !emp.teamId) ||\n                (emp.teamId === +teamId && emp.departmentId === +departmentId)\n            );\n        })\n        .map(({ id, name }) => {\n            return {\n                key: id,\n                text: name,\n                value: id,\n            };\n        });\n};\n\nconst updateTeamMembers = (members, departmentId, teamId, action) => {\n    const departments = getCollection('departments');\n    const employees = getCollection('employees');\n    const department = departments.find(dep => dep.id === +departmentId);\n    const team = department.teams.find(team => team.id === +teamId);\n    const selectedMembers = employees.filter(emp => members.includes(emp.id));\n\n    if (action === 'add') {\n        // Updating the members details like position.\n        selectedMembers.forEach(emp => {\n            emp.departmentId = +departmentId;\n            emp.teamId = +teamId;\n            emp.position = 'team member';\n        });\n        // Updating the teamMembers property of team.\n        team.teamMembers = [...team.teamMembers, ...members];\n\n    } else if (action === 'remove') {\n        selectedMembers.forEach(emp => {\n            emp.departmentId = null;\n            emp.teamId = null;\n            emp.position = null;\n        });\n        team.teamMembers = team.teamMembers.filter(item => !members.includes(item));\n    }\n\n    saveCollection(\"employees\", employees);\n    saveCollection(\"departments\", departments);\n\n    return {\n        updatedEmployees: employees,\n        updatedDepartments: departments,\n    }\n}\n\nexport {\n    getCollection,\n    saveCollection,\n    isEmployeeExist,\n    saveEmployee,\n    getEmployeeById,\n    getObjectById,\n    updateEmployeeInfo,\n    saveDepartment,\n    isDepartmentExist,\n    saveTeam,\n    isObjectExist,\n    getExistingTeam,\n    updateTeam,\n    filterEmployees,\n    updateTeamMembers,\n    getExistingTeamEmployees,\n    loadDepartmentsData,\n    loadEmployeesData\n};","import { createContext, useEffect, useState } from \"react\";\nimport { getCollection, loadDepartmentsData, loadEmployeesData } from \"../helper/HelperApi\";\n\nexport const DepartmentsContext = createContext();\n\nexport const DepartmentsProvider = ({ children }) => {\n  const [departments, setDepartments] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    let deps = getCollection('departments');\n    let emps = getCollection('employees');\n    if (!deps.length) {\n      deps = loadDepartmentsData();\n    }\n    if (!emps.length) {\n      emps = loadEmployeesData();\n    }\n    setDepartments(deps);\n    setEmployees(emps);\n  }, []);\n\n  return (\n    <DepartmentsContext.Provider\n      value={{\n        departments,\n        setDepartments,\n        employees,\n        setEmployees\n      }}\n    >\n      {children}\n    </DepartmentsContext.Provider>\n  );\n};\n","import { Header, Grid, Icon, Table, Input } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getCollection } from \"../../helper/HelperApi\";\n\nconst EmployeeDetails = () => {\n  const [employees, setEmployees] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    let collection = getCollection(\"employees\");\n    setEmployees(collection);\n    setSearchResults(collection);\n    console.log(collection);\n  }, []);\n\n  /**\n   * Personally I don't think this is the correct way to implement\n   * the searching but I want to avoid any other npm package so\n   * implemented this logic.\n   */\n  const searchEmployee = (e, { value }) => {\n    if (value) {\n      const newEmployeeList = employees.filter((employee) => {\n        return Object.values(employee)\n          .join(\" \")\n          .toLowerCase()\n          .includes(value.toLowerCase());\n      });\n      setSearchResults(newEmployeeList);\n    } else {\n      setSearchResults(employees);\n    }\n  };\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={13}>\n          <Header as=\"h3\">Employee Details</Header>\n          <p>Emplyee details and some more actions</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={3}>\n          <Link to=\"/updateEmployee\" className=\"ui primary right floated button mini\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Table key=\"employeesTable\" color=\"blue\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan={5}>\n                  <p>Please enter any employee details to search.</p>\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  <Input\n                    icon=\"search\"\n                    placeholder=\"Search...\"\n                    className=\"mini\"\n                    onChange={searchEmployee}\n                  />\n                </Table.HeaderCell>\n              </Table.Row>\n              <Table.Row>\n                <Table.HeaderCell>ID</Table.HeaderCell>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell>Email</Table.HeaderCell>\n                <Table.HeaderCell>Phone Number</Table.HeaderCell>\n                <Table.HeaderCell>Position</Table.HeaderCell>\n                <Table.HeaderCell>Action</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {searchResults &&\n                searchResults.map(\n                  ({ id, name, email, phoneNumber, position }) => {\n                    return (\n                      <Table.Row key={id}>\n                        <Table.Cell>{id}</Table.Cell>\n                        <Table.Cell>{name}</Table.Cell>\n                        <Table.Cell>{email}</Table.Cell>\n                        <Table.Cell>{phoneNumber}</Table.Cell>\n                        <Table.Cell>{position}</Table.Cell>\n                        <Table.Cell>\n                          <Link\n                            to={`/updateEmployee/${id}`}\n                            className=\"ui primary center floated button mini\"\n                          >\n                            <Icon name=\"edit\" /> Edit\n                          </Link>\n                        </Table.Cell>\n                      </Table.Row>\n                    );\n                  }\n                )}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default EmployeeDetails;\n","import {\n  Header,\n  Container,\n  Form,\n  Grid,\n  Input,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useEffect, useState, useContext } from \"react\";\nimport {\n  saveEmployee,\n  getObjectById,\n  updateEmployeeInfo,\n} from \"../../helper/HelperApi\";\n\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\n\nconst AddUpdateEmployee = () => {\n  let history = useHistory();\n  const { employees, setEmployees } = useContext(DepartmentsContext);\n\n  const [employee, setEmployee] = useState({});\n  const [updateAction, setUpdateAction] = useState(false);\n\n  let { id } = useParams();\n\n  useEffect(() => {\n    const existingInfo = getObjectById(employees, +id);\n    if (existingInfo && existingInfo.email) {\n      setEmployee({ ...existingInfo });\n      setUpdateAction(true);\n    }\n  }, [id, employees]);\n\n  const handleChange = (e) => {\n    let emp = employee;\n    emp[e.target.name] = e.target.value;\n    setEmployee(emp);\n    console.log(id);\n  };\n\n  const handleSubmit = () => {\n    let emp = employee;\n    let result = {};\n    if (updateAction) {\n      result = updateEmployeeInfo(emp);\n    } else {\n      result = saveEmployee(\"employees\", emp);\n    }\n    if (!result.error) {\n      setEmployees(result.collection);\n    }\n    history.push(\"/employee\");\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">{id ? \"Update\" : \"Add\"} Employee Details </Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Name\"\n                name=\"name\"\n                defaultValue={(updateAction && employee && employee.name) || \"\"}\n                placeholder=\"joe schmoe\"\n                onChange={handleChange}\n              />\n              <Form.Field\n                id=\"phone-number\"\n                control={Input}\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                defaultValue={\n                  (updateAction && employee && employee.phoneNumber) || \"\"\n                }\n                onChange={handleChange}\n              />\n              <Form.Field\n                id=\"email\"\n                control={Input}\n                label=\"Email\"\n                name=\"email\"\n                defaultValue={\n                  (updateAction && employee && employee.email) || \"\"\n                }\n                placeholder=\"joe@schmoe.com\"\n                onChange={handleChange}\n              />\n              <button className=\"ui primary button\" onClick={handleSubmit}>Save</button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default AddUpdateEmployee;\n","import { Header, Grid, Icon, Table } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport { getObjectById } from \"../../helper/HelperApi\";\n\nconst DepartmentDetails = () => {\n  const { departments, employees } = useContext(DepartmentsContext);\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column floated=\"left\" width={13}>\n          <Header as=\"h3\">Departments Details</Header>\n          <p>Departments details and some more actions</p>\n        </Grid.Column>\n        <Grid.Column floated=\"right\" width={3}>\n          <Link to=\"/AddDepartment\" className=\"ui primary right floated button mini\">\n            <Icon name=\"plus\" /> New\n          </Link>\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Table color=\"blue\" key=\"departmentsTable\">\n            <Table.Header>\n              <Table.Row>\n                {[\"ID\", \"Department Name\", \"Head\", \"Action\"].map((title) => {\n                  return (\n                    <Table.HeaderCell key={title}>{title}</Table.HeaderCell>\n                  );\n                })}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {departments &&\n                departments.map(({ name, id, teams, head }) => {\n                  return (\n                    <Table.Row key={id}>\n                      <Table.Cell>{id}</Table.Cell>\n                      <Table.Cell>{name}</Table.Cell>\n                      <Table.Cell>{getObjectById(employees, head).name}</Table.Cell>\n                      <Table.Cell>\n                        <Link\n                          to={`/departmentDetails/${id}`}\n                          className=\"ui primary button mini\"\n                        >\n                          <Icon name=\"eye\" /> View\n                        </Link>\n                      </Table.Cell>\n                    </Table.Row>\n                  );\n                })}\n            </Table.Body>\n          </Table>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default DepartmentDetails;\n","import { useState, useContext, useEffect } from \"react\";\nimport { Header, Grid, Container, Form, Input, Select, Message } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { saveDepartment, filterEmployees } from \"../../helper/HelperApi\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\n\nconst DepartmentForm = () => {\n  let history = useHistory();\n\n  const { employees, setDepartments, setEmployees } = useContext(DepartmentsContext);\n\n  const [departmentInfo, setDepartmentInfo] = useState({});\n  const [empOptions, setEmpOtions] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const empOptions = filterEmployees(employees);\n    setEmpOtions(empOptions);\n  }, [employees]);\n\n  const handleChange = (e, { name, value }) => {\n    const depInfo = departmentInfo;\n    departmentInfo[name] = value\n    setDepartmentInfo(depInfo);\n  };\n\n  const handleSubmit = (e) => {\n    if (departmentInfo) {\n      const result = saveDepartment(departmentInfo);\n      if (result.error) {\n        setError(true);\n      } else {\n        setEmployees(result.employees);\n        setDepartments(result.departments);\n        history.push(\"/departments\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">Add Department Details</Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Department Name\"\n                name=\"departmentName\"\n                onChange={handleChange}\n              />\n\n              <Form.Field\n                control={Select}\n                label=\"Department Head\"\n                placeholder=\"Department Head\"\n                name=\"departmentHead\"\n                options={empOptions}\n                search\n                selection\n                onChange={handleChange}\n              />\n              {error && <Message info header='Department already exists.' content=\"\" />}\n              <button className=\"ui primary button\" onClick={handleSubmit} >\n                Save\n              </button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default DepartmentForm;\n","import { Header, Grid, Icon, Table, List } from \"semantic-ui-react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport { getObjectById } from \"../../helper/HelperApi\";\n\nconst TeamDetails = () => {\n  const { departments, employees } = useContext(DepartmentsContext);\n  const { id: departmentId } = useParams();\n\n  const [departmentInfo, setDepartmentInfo] = useState();\n\n  useEffect(() => {\n    setDepartmentInfo(getObjectById(departments, +departmentId));\n  }, [departments, departmentId])\n\n  return (\n    <>\n      {departmentInfo && (<div>\n        <Grid>\n          <Grid.Column floated=\"left\" width={13}>\n            <Header as=\"h3\">{departmentInfo && departmentInfo.name}</Header>\n            <p>Below are the team details of selected present under this department</p>\n          </Grid.Column>\n          <Grid.Column floated=\"right\" width={3}>\n            <Link to={`/addTeam/${departmentId}`} className=\"ui primary right floated button mini\">\n              <Icon name=\"plus\" /> New\n            </Link>\n          </Grid.Column>\n          <Grid.Column width={16}>\n            <Table color=\"blue\" key=\"departmentsTable\">\n              <Table.Header>\n                <Table.Row>\n                  {[\"ID\", \"Team Name\", \"Team Leader\", \"Team Members\", \"Action\"].map((title) => {\n                    return (\n                      <Table.HeaderCell key={title}>{title}</Table.HeaderCell>\n                    );\n                  })}\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {departmentInfo &&\n                  departmentInfo.teams.map(({ name, id, teamLeader, teamMembers }) => {\n                    return (\n                      <Table.Row key={id}>\n                        <Table.Cell>{id}</Table.Cell>\n                        <Table.Cell>{name}</Table.Cell>\n                        <Table.Cell>{getObjectById(employees, teamLeader).name}</Table.Cell>\n                        <Table.Cell>\n                          <List key={id} items={teamMembers && teamMembers.map(mem => {\n                            return getObjectById(employees, mem).name\n                          })} />\n                        </Table.Cell>\n                        <Table.Cell>\n                          <Link to={`/updateTeam/${departmentId}/${id}`} className=\"ui primary button mini\">\n                            Edit\n                          </Link>\n                          <Link to={`/updateMembers/add/${departmentId}/${id}`} className=\"ui orange button mini\">\n                            Add member\n                          </Link>\n                          <Link to={`/updateMembers/remove/${departmentId}/${id}`} className=\"ui red button mini\" color='red'>\n                            Remove member\n                          </Link>\n                        </Table.Cell>\n                      </Table.Row>\n                    );\n                  })}\n              </Table.Body>\n            </Table>\n          </Grid.Column>\n        </Grid>\n      </div>)}\n    </>\n  );\n};\n\nexport default TeamDetails;\n","import { useState, useContext, useEffect } from \"react\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Form,\n  Input,\n  Select,\n  List,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport {\n  saveTeam,\n  getExistingTeam,\n  getObjectById,\n  updateTeam,\n  filterEmployees,\n} from \"../../helper/HelperApi\";\n\nconst TeamForm = () => {\n  const history = useHistory();\n  const { departmentId, teamId } = useParams();\n\n  const { departments, setDepartments, employees, setEmployees } =\n    useContext(DepartmentsContext);\n\n  const [teamInfo, setTeamInfo] = useState({ departmentId: +departmentId });\n  const [existingTeamInfo, setExistingTeamInfo] = useState({});\n  const [employeesOptions, setEmployeesOptions] = useState([]);\n  const [leaderOptions, setLeaderOptions] = useState([]);\n  const [updateAction, setUpdateAction] = useState('add');\n\n  useEffect(() => {\n    const empOptions = filterEmployees(employees, teamId, departmentId);\n    setEmployeesOptions(empOptions);\n    setLeaderOptions(empOptions);\n  }, [employees, departmentId, teamId, departments]);\n\n  useEffect(() => {\n    const existingInfo = getExistingTeam(departmentId, teamId, departments);\n    if (existingInfo.id) {\n      setExistingTeamInfo(existingInfo);\n      setUpdateAction('update');\n\n      //also updating previous id of team\n      const team = teamInfo;\n      team.id = existingInfo.id;\n      team.name = existingInfo.name;\n    }\n  }, [employees, departmentId, teamId, departments, teamInfo]);\n\n  const handleChange = (e, { name, value }) => {\n    const team = teamInfo;\n    team[name] = value;\n    setTeamInfo(team);\n    console.log(teamInfo);\n    if (name === \"teamLeader\") {\n      const filterEmployeesOptions = filterEmployees(\n        employees,\n        teamId,\n        departmentId\n      ).filter((emp) => {\n        return emp.value !== value;\n      });\n      setEmployeesOptions(filterEmployeesOptions);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    let result;\n    if (updateAction === 'update') {\n      result = updateTeam(teamInfo);\n    } else if (updateAction === 'add') {\n      result = saveTeam(teamInfo);\n    }\n    setEmployees(result.updatedEmployees);\n    setDepartments(result.updatedDepartments);\n    history.push(`/departmentDetails/${departmentId}`);\n  };\n\n  return (\n    <>\n      <Container>\n        <Header as=\"h3\">\n          {teamId && departmentId ? \"Update\" : \"Add\"} Team Details\n        </Header>\n        <Grid>\n          <Grid.Column width={8}>\n            <Form>\n              <Form.Field\n                id=\"full-name\"\n                control={Input}\n                label=\"Team Name\"\n                name=\"name\"\n                defaultValue={(updateAction && existingTeamInfo.name) || \"\"}\n                onChange={handleChange}\n              />\n              {updateAction === 'update' && existingTeamInfo && existingTeamInfo.teamLeader && (\n                <p>Old team leader : {getObjectById(employees, existingTeamInfo.teamLeader).name}</p>\n              )}\n              <Form.Field\n                control={Select}\n                label=\"Team Leader\"\n                name=\"teamLeader\"\n                options={leaderOptions}\n                placeholder=\"Team Leader\"\n                search\n                onChange={handleChange}\n              />\n              {updateAction === 'update' && existingTeamInfo && existingTeamInfo.teamMembers.length && (\n                <>\n                  <p>Old team members</p>\n                    <List.Item as=\"ol\" key={existingTeamInfo.id}>\n                      {existingTeamInfo.teamMembers.map((mem) => {\n                        return (\n                          <List.Item key={mem} as=\"li\" value=\"-\">\n                            {getObjectById(employees, mem).name}\n                          </List.Item>\n                        );\n                      })}\n                    </List.Item>\n                </>\n              )}\n\n              {updateAction === \"add\" && <Form.Dropdown\n                control={Select}\n                label=\"Team Members\"\n                placeholder=\"Team Memebers\"\n                name=\"teamMembers\"\n                options={employeesOptions}\n                search\n                multiple\n                selection\n                onChange={handleChange}\n              />}\n\n              <button className=\"ui primary button\" onClick={handleSubmit}>\n                Save\n              </button>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default TeamForm;\n","import { useState, useEffect, useContext } from \"react\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Form,\n  Select,\n  Message,\n} from \"semantic-ui-react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DepartmentsContext } from \"../../context/DepartmentsContext\";\nimport {\n  filterEmployees,\n  updateTeamMembers,\n  getExistingTeamEmployees,\n} from \"../../helper/HelperApi\";\n\nconst TeamMemberForm = () => {\n  const history = useHistory();\n  const { action, departmentId, teamId } = useParams();\n\n  const { employees, setDepartments, setEmployees } =\n    useContext(DepartmentsContext);\n  const [employeesOptions, setEmployeesOptions] = useState([]);\n  const [newMembers, setNewMembers] = useState([]);\n\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (action === \"add\") {\n      const empOptions = filterEmployees(employees);\n      setEmployeesOptions(empOptions);\n    } else if (action === \"remove\") {\n      const result = getExistingTeamEmployees(departmentId, teamId);\n      if (result.error) {\n        setError(result.error);\n      } else {\n        setEmployeesOptions(result);\n      }\n    }\n  }, [employees, departmentId, teamId, action]);\n\n  const handleChange = (e, { name, value }) => {\n    setNewMembers(value);\n    console.log(newMembers);\n  };\n\n  const handleSubmit = (e) => {\n    const { updatedEmployees, updatedDepartments } = updateTeamMembers(\n      newMembers,\n      departmentId,\n\t\t\tteamId,\n\t\t\taction\n    );\n    setDepartments(updatedDepartments);\n    setEmployees(updatedEmployees);\n    history.push(`/departmentDetails/${departmentId}`);\n  };\n\n  return (\n    <Container>\n      {!error ? (\n        <>\n          <Header as=\"h3\">\n            {action === \"add\" ? \"Add new\" : \"Remove\"} team members\n          </Header>\n          <p>\n            You can {action === \"add\" ? \"add\" : \"remove\"} multiple team members\n            in the existing team.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tBelow field is showing all the employees which are\n\t\t\t\t\t\t{action === \"add\" ? \" not assigned into any teams.\" : \" present in the team.\"}\n          </p>\n          <Grid>\n            <Grid.Column width={8}>\n              <Form>\n                <Form.Select\n                  control={Select}\n                  label=\"Team Members\"\n                  placeholder=\"Team Memebers\"\n                  name=\"teamMembers\"\n                  options={employeesOptions}\n                  search\n                  multiple\n                  onChange={handleChange}\n                />\n                <button className=\"ui primary button\" onClick={handleSubmit}>\n                  Save\n                </button>\n              </Form>\n            </Grid.Column>\n          </Grid>\n        </>\n      ) : (\n        <Message info header={error} content=\"\" />\n      )}\n    </Container>\n  );\n};\n\nexport default TeamMemberForm;\n","import {\n  List,\n  Divider\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DepartmentsContext } from \"../context/DepartmentsContext\";\nimport { useContext } from \"react\";\n\nconst InfoTree = () => {\n  const { departments } = useContext(DepartmentsContext);\n\n  return (\n    <List>\n      <ListItem icon=\"users\" label=\"Employee Details\" route=\"/employee\" id=\"usersList\" />\n      <Divider />\n      <List.Item key=\"deps&teams\">\n        <List.Icon name=\"user\" />\n        <List.Content>\n          <Link to=\"/departments\">\n            <List.Header>CEO</List.Header>\n          </Link>\n\t\t\t\t\t<List.List key=\"departments\">\n\t\t\t\t\t\t{departments && departments.map(department => {\n\t\t\t\t\t\t\treturn <ListItem\n\t\t\t\t\t\t\t\tid={department.id}\n\t\t\t\t\t\t\t\tlabel={department.name}\n\t\t\t\t\t\t\t\ticon='building'\n\t\t\t\t\t\t\t\troute={`/departmentDetails/${department.id}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</List.List>\n        </List.Content>\n      </List.Item>\n    </List>\n  );\n};\n\nconst ListItem = ({ id, icon, route, label }) => {\n  return (\n    <List.Item key={id}>\n      <List.Icon name={icon} />\n      <List.Content>\n        <Link to={route}>\n          <List.Header>{label}</List.Header>\n\t\t\t\t</Link>\n      </List.Content>\n    </List.Item>\n  );\n};\n\nexport default InfoTree;\n","import \"semantic-ui-css/semantic.min.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  Header,\n  Grid,\n  Container,\n  Segment,\n} from \"semantic-ui-react\";\n\nimport { DepartmentsProvider } from \"./context/DepartmentsContext\";\n\nimport EmployeeDetails from \"./pages/employee/EmployeeDetails\";\nimport AddUpdateEmployee from \"./pages/employee/AddUpdateEmployee\";\n\nimport DepartmentDetails from \"./pages/department/DepartmentDetails\";\nimport DepartmentForm from \"./pages/department/DepartmentForm\";\nimport TeamDetails from \"./pages/team/TeamDetails\";\nimport TeamForm from \"./pages/team/TeamForm\";\nimport TeamMemberForm from \"./pages/team/TeamMemberForm\";\n\nimport InfoTree from \"./components/InfoTree\";\n\nfunction App() {\n  return (\n    <DepartmentsProvider>\n      <Container style={{ padding: \"1rem\" }}>\n        <Header as=\"h2\" attached=\"top\">\n          React Assignment\n        </Header>\n        <Segment attached>\n          <Router>\n            <Grid>\n              <Grid.Column mobile={16} tablet={4} computer={4}>\n                <InfoTree />\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={12} computer={12}>\n                <Switch>\n                  <Route path=\"/employee\">\n                    <EmployeeDetails />\n                  </Route>\n                  <Route path=\"/updateEmployee/:id\">\n                    <AddUpdateEmployee />\n                  </Route>\n                  <Route path=\"/updateEmployee\">\n                    <AddUpdateEmployee />\n                  </Route>\n                  <Route path=\"/departmentDetails/:id\">\n                    <TeamDetails />\n                  </Route>\n                  <Route path=\"/addDepartment\">\n                    <DepartmentForm />\n                  </Route>\n                  <Route path=\"/departments\">\n                    <DepartmentDetails />\n                  </Route>\n                  <Route path=\"/addTeam/:departmentId\">\n                    <TeamForm />\n                  </Route>\n                  <Route path=\"/updateTeam/:departmentId/:teamId\">\n                    <TeamForm />\n                  </Route>\n                  <Route path=\"/updateMembers/:action/:departmentId/:teamId\">\n                    <TeamMemberForm />\n                  </Route>\n                </Switch>\n              </Grid.Column>\n            </Grid>\n          </Router>\n        </Segment>\n      </Container>\n    </DepartmentsProvider>\n  );\n}\n\n// const ListExampleTree = () => (\n//   <List>\n//     <List.Item>\n//       <List.Icon name=\"users\" />\n//       <List.Content>\n//         <Link to=\"/employee\">\n//           <List.Header>Employee Details</List.Header>\n//         </Link>\n//       </List.Content>\n//     </List.Item>\n//     <Divider />\n//     <List.Item>\n//       <List.Icon name=\"user\" />\n//       <List.Content>\n//         <Link to=\"/departments\">\n//           <List.Header>CEO</List.Header>\n//         </Link>\n//         <List.List>\n//           <List.Item>\n//             <List.Icon name=\"building\" />\n//             <List.Content>\n//               <Link to=\"/departmentDetails/2\">\n//                 <List.Header>Head of Engineering</List.Header>\n//               </Link>\n//             </List.Content>\n//           </List.Item>\n//         </List.List>\n//       </List.Content>\n//     </List.Item>\n//   </List>\n// );\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}